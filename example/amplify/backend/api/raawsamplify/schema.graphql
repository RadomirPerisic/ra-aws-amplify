type Post
  @model
  # @searchable
  @auth(
    rules: [
      { allow: owner }
      { allow: owner, ownerField: "editors", operations: [update] }
      { allow: public, operations: [read] }
      { allow: groups, groups: ["admin"] }
    ]
  ) {
  id: ID!
  title: String!
  content: String
  image: Media @connection
  comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
  categories: [PostCategory]
    @connection(keyName: "categoriesByPost", fields: ["id"])
}

type Comment
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: groups, groups: ["admin", "editor"] }
    ]
  )
  @key(name: "byPost", fields: ["postId"], queryField: "commentsByPost") {
  id: ID!
  content: String
  postId: ID!
}

type Media
  @model
  # @searchable
  @auth(
    rules: [{ allow: owner }, { allow: groups, groups: ["admin", "editor"] }]
  ) {
  id: ID!
  name: String
  attachment: S3Object!
}

type PostCategory
  @model
  @key(
    name: "categoriesByPost"
    fields: ["postId", "categoryId"]
    queryField: "postCategorysByPost"
  )
  @key(
    name: "postsByCategory"
    fields: ["categoryId", "postId"]
    queryField: "postCategorysByCategory"
  )
  @auth(
    rules: [{ allow: owner }, { allow: groups, groups: ["admin", "editor"] }]
  ) {
  id: ID!
  postId: ID!
  categoryId: ID!
  post: Post! @connection(fields: ["postId"])
  category: Category! @connection(fields: ["categoryId"])
}

type Category
  @model
  @auth(
    rules: [{ allow: owner }, { allow: groups, groups: ["admin", "editor"] }]
  ) {
  id: ID!
  title: String
  posts: [PostCategory] @connection(keyName: "postsByCategory")
}

# S3Object minimum type
type S3Object {
  key: String!
  identityId: String
  level: String
}
